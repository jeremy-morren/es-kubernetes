{{- if .Release.IsInstall }}
  
# Generate esdb certs for nodes
# Also generate Default proxy TLS
  
# We want to generate the proxy certificate ASAP
# So we run that as the first init container
  
# Second init container generates certificates using es-gencert-cli image
# Actual container patches the esdb-certs secret
  
{{- $dnsNames := list}}
{{- range $i, $e := until ($.Values.eventstore.clusterSize | int) }}
  {{- $dnsNames = append $dnsNames (print "DNS:" (index $.Values.proxy.hosts ($i | toString))) }}
{{- end }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "esdb.fullname" . }}-gen-certs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "esdb.labels" . | nindent 4 }}
    app.kubernetes.io/component: cluster
  annotations:
    "helm.sh/hook": post-install
spec:
  ttlSecondsAfterFinished: 100
  backoffLimit: 2
  template:
    metadata:
      labels:
        {{- include "esdb.labels" . | nindent 8 }}
        app.kubernetes.io/component: cluster
    spec:
      serviceAccountName: {{ include "esdb.serviceAccountName" . }}
      initContainers:
        - name: gen-esdb-certs
          image: {{.Values.cliImages.genCerts.repository}}:{{.Values.cliImages.genCerts.tag}}
          imagePullPolicy: {{.Values.cliImages.genCerts.pullPolicy}}
          volumeMounts:
            - mountPath: /certs
              name: certs
          command:
            - /bin/sh
            - '-c'
            - |
              es-gencert-cli create-ca -days '{{.Values.certificatesLength.ca }}' -out /certs/ca
              chmod 444 /certs/ca/*
              {{range $i, $e := until (.Values.eventstore.clusterSize | int) }}
              es-gencert-cli create-node -days '{{ $.Values.certificatesLength.node}}' \
                -ca-certificate /certs/ca/ca.crt -ca-key /certs/ca/ca.key \
                -dns-names 'localhost,{{ include "esdb.fullname" $ }}-cluster-{{$i}}' \
                -out /certs/{{$i}}
              chmod 444 /certs/{{$i}}/*
              {{end}}
      containers:
        - name: patch-esdb-certs
          image: {{.Values.cliImages.kubectl.repository}}:{{.Values.cliImages.kubectl.tag}}
          imagePullPolicy: {{.Values.cliImages.kubectl.pullPolicy}}
          volumeMounts:
            - mountPath: /certs
              name: certs
          #Writing all of this in the yaml file isn't an elegant solution
          #But it works and doesn't necessitate any extra images
          command:
            - /bin/bash
            - '-c'
            - |
              #Start by patching esdb certs
              
              #Args are $1=key $2=filename
              values='{}'
              patch() {
                #Append key/value to values
                values=$(jq -c --arg k "$1" --arg v "$(base64 -w 0 $2)" '. += { ($k): $v }' <<<"$values")
              }
              patch ca.crt /certs/ca/ca.crt
              patch ca.key /certs/ca/ca.key
              {{- range $i, $e := until (.Values.eventstore.clusterSize | int) }}
              patch node-{{$i}}.crt /certs/{{$i}}/node.crt
              patch node-{{$i}}.key /certs/{{$i}}/node.key
              {{- end}}

              #Build final patch json
              json=$(jq --argjson v "$values" '.[0] |= { "op": "replace", "path": "/data", "value": $v }'<<<'[]')
              kubectl patch secret -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-certs' --type=json "-p=$json"
              #Mark the secret as immutable
              kubectl patch secret -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-certs' --type=json \
                '-p=[ { "op": "replace", "path": "/immutable", "value": true } ]'
              
              echo "Patched secret {{ include "esdb.fullname" . }}-certs"

              #Generate fake proxy certificate
              openssl req -x509 \
                -newkey rsa:2048 \
                -addext 'subjectAltName = {{ join "," $dnsNames }}' \
                -out /tmp/tls.crt -keyout /tmp/tls.key \
                -nodes \
                -days 3650 \
                -subj "/CN=Fake EventStoreDB Ingress Certificate"
              
              #We have to allow for the possibility that cert-manager has already generated a real TLS cert
              #If we use create, then we will get a 'secret already exists' error
              #Which actually suits us just fine, as we do not want to overwrite anything
              kubectl create secret tls '{{ include "helpers.tlssecret" . }}' --cert /tmp/tls.crt --key /tmp/tls.key
              if [ $? -eq 0 ]; then
                echo Created TLS secret '{{ include "helpers.tlssecret" . }}'
              else
                echo TLS secret '{{ include "helpers.tlssecret" . }}' already exists, ignoring
              fi
              
              #Scale (now that the certificates are available)
              kubectl scale statefulset.apps -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-cluster' '--replicas={{.Values.eventstore.clusterSize }}'
              kubectl rollout restart statefulset.apps -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-cluster'

              kubectl scale deployment.apps -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-proxy' '--replicas={{.Values.proxy.deployment.replicas }}'
              kubectl rollout restart deployment.apps -n '{{ .Release.Namespace }}' '{{ include "esdb.fullname" . }}-proxy'
              
              echo "Scaled applications"
      restartPolicy: Never
      volumes:
        - name: certs
          emptyDir: {}

{{- end -}}