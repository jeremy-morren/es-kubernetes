apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "chart.fullname" . }}-cluster
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
    app.kubernetes.io/component: cluster
  annotations:
    {{- toYaml .Values.cluster.annotations | nindent 4 }}
spec:
  serviceName: {{ include "chart.fullname" .}}-cluster
  selector:
    matchLabels:
      {{- include "chart.labels" . | nindent 6 }}
      app.kubernetes.io/component: cluster
      app.kubernetes.io/cluster-node: "true"
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  replicas: {{ .Values.clusterSize }}
  template:
    metadata:
      labels:
        {{- include "chart.labels" . | nindent 8 }}
        app.kubernetes.io/component: cluster
        app.kubernetes.io/cluster-node: "true"
    spec:
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      {{- with .Values.cluster.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      initContainers:
        - name: setup
          image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ '/bin/sh', '/setup/run.sh' ]
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CLUSTER_SIZE
              value: '{{ .Values.clusterSize }}'
            - name: CLUSTER_NAME
              value: 'EventStoreDB {{ include "chart.fullname" .}}'
            - name: CA_SECRET
              value: "{{ include "chart.fullname" .}}-ca"

          volumeMounts:
            - mountPath: /certs/node
              name: node-certs
            - mountPath: /certs/ca
              name: ca-certs
            - mountPath: /config/static
              name: cluster-config
            - mountPath: /config/node
              name: node-config
          
      containers:
        - name: esdb
          image: '{{ .Values.eventstore.image.repository }}:{{ .Values.eventstore.image.tag | default .Chart.AppVersion }}-{{ .Values.eventstore.image.base }}'
          imagePullPolicy: {{ .Values.eventstore.image.pullPolicy }}
          {{- with .Values.eventstore.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{end}}
          ports:
            - containerPort: 1113
              name: tcp-gossip
              protocol: TCP
            - containerPort: 2113
              name: gossip
              protocol: TCP
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /certs/node
              name: node-certs
            - mountPath: /certs/ca
              name: ca-certs
            - mountPath: /etc/eventstore
              name: node-config
            - mountPath: /data/db
              name: {{ include "chart.fullname" $}}-data
            - mountPath: /data/log
              name: {{ include "chart.fullname" $}}-logs
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          livenessProbe:
            exec:
              command: ['/bin/sh', '-c', 'curl --cacert /certs/ca/ca.crt https://localhost:2113/gossip --fail --silent']
          #Probe the /gossip endpoint
          #The /health/live endpoint fails when the cluster is invalid
          startupProbe:
            exec:
              command: ['/bin/sh', '-c', 'curl --cacert /certs/ca/ca.crt https://localhost:2113/gossip --fail --silent']
            failureThreshold: {{ .Values.eventstore.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.eventstore.startupProbe.periodSeconds }}

        - name: proxy
          image: '{{ .Values.image.repository}}:{{ .Values.image.tag }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.proxy.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{end}}
          volumeMounts:
            - mountPath: /certs/ca
              name: ca-certs
            - mountPath: /certs/public
              name: proxy-tls
            - mountPath: /certs/clients
              name: client-certs
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
          terminationMessagePolicy: FallbackToLogsOnError
          env:
            - name: PROXY_EVENTSTORE__CLUSTERURLS
              value: {{ ((include "helpers.hosts" .) | fromYaml).items | join "," | quote }}
            - name: PROXY_CLIENTCERTS
              value: '{{ include "chart.fullname" . }}-client-certs'
            - name: PROXY_ACMEHOST
              value: '{{ .Values.proxy.acmeHost }}'
          livenessProbe:
            tcpSocket:
              port: https
                

      {{- with .Values.cluster.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}  
      {{- with .Values.cluster.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.cluster.terminationGracePeriodSeconds }}

      restartPolicy: Always
      
      volumes:
        - name: cluster-config
          configMap:
            name: {{ include "chart.fullname" $}}-cluster-config
            defaultMode: 0440
        - name: ca-certs
          secret:
            secretName: {{ include "chart.fullname" $}}-ca-certs
            defaultMode: 0440
            
        - name: node-config
          emptyDir: {}
        - name: node-certs
          emptyDir: {}
          
        - name: client-certs
          secret:
            defaultMode: 0440
            secretName: {{ include "chart.fullname" . }}-client-certs
        - name: proxy-tls
          secret:
            defaultMode: 0440
            secretName: {{ include "chart.fullname" . }}-ingress-tls
            optional: true

  volumeClaimTemplates:
    - metadata:
        name: {{ include "chart.fullname" $}}-data
        labels:
          {{- include "chart.labels" . | nindent 10 }}
          app.kubernetes.io/component: cluster
        {{- with .Values.eventstore.storage.data.annotations }}
        annotations:
          {{ . | toYaml | nindent 10 }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.eventstore.storage.data.class }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.eventstore.storage.data.size }}
    - metadata:
        name: {{ include "chart.fullname" $}}-logs
        labels:
          {{- include "chart.labels" . | nindent 10 }}
          app.kubernetes.io/component: cluster
        {{- with .Values.eventstore.storage.logs.annotations }}
        annotations:
          {{ . | toYaml | nindent 10 }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.eventstore.storage.logs.class }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.eventstore.storage.logs.size }}